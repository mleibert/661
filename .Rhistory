x<-( (1-p) * t(matt) %*% x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm( ( (1-p) * t(matt) %*% x ) + ( rep( (1/m)* p * sum(x),m) ) )
if( norm(x-y) < 10^-14 ) {break} } )
x<<-x
print(tt)
print(paste0("Iterations: ", i))
}
myfunction(G,.15)
node[,1]<-x
head( node[with(node, order(V1,decreasing = T)), ] , 20)
edge<-read.table("edges.txt")
nodez<-read.table("nodes.txt")
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
edge<-rbind(edge,dat)
dat<-data.frame(setdiff(edge$V1,edge$V2), setdiff(edge$V1,edge$V2))
edge<-read.table("edges.txt")
nodez<-read.table("nodes.txt")
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
dat<-data.frame(setdiff(edge$V1,edge$V2), setdiff(edge$V1,edge$V2))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
rm(dat)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
edge$V3<-1
edge<-read.table("edges.txt")
nodez<-read.table("nodes.txt")
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
zeroes
edge<-read.table("edges.txt")
nodez<-read.table("nodes.txt")
zeroes<-setdiff(edge$V1,edge$V2)
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
dat<-data.frame(setdiff(edge$V1,edge$V2), setdiff(edge$V1,edge$V2))
names(dat)<-names(edge)
edge<-rbind(edge,dat);rm(dat)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
edge$V3<-1
edge[zeroes,3]<-0
tail(edge)
library(Matrix)
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
all(round(rowSums(A),15) == 1)
all(round(rowSums(A),14) == 1)
myfunction(A,.15)
nodez$P<-x
head( nodez[with(nodez, order(P,decreasing = T)), ] , 10)
head(nodez)
nodez<-read.table("nodes.txt")
head(nodez)
head(x)
nodez$P<-as.numeric( x )
head( nodez[with(nodez, order(P,decreasing = T)), ] , 10)
head( node[with(node, order(V1,decreasing = T)), ] , 10)
head( nodez[with(nodez, order(P,decreasing = T)), ] , 10)
head( node[with(node, order(V1,decreasing = T)), ] , 10)
nodez<-read.table("nodes.txt")
nodez[,1]<-x
head( nodez[with(node, order(V1,decreasing = T)), ] , 20)
nodez[,1]<-as.numeric( x )
head( nodez[with(node, order(V1,decreasing = T)), ] , 20)
head( node[with(node, order(V1,decreasing = T)), ] , 10)
options(width = 400)
rm(list = ls())
options(warn=-1)
suppressMessages(library(expm))
options(warn=0)
set.seed(2)
options(scipen=999)
setwd("g:\\math\\504")
mat<-matrix(0,5,5)
for( i in 1:5){
y<-sample(1:5,sample(2:5,1))
x<-sample(1:10,length(y))
x<-x/sum(x)
mat[i,y]<-x
}
mat;rowSums(mat)
m=5
p=.15
matB<-matrix(1/m,m,m)
rowSums( (1-p) * mat )
rowSums( ( p) * matB)
matA<-(1-p) * mat + ( p) * matB
####### We note we can write B as a vector 1/n * p *  Î£ x
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
print(G%^%100)
}
myfunction(mat,.15)
myfunction(mat,.65)
edge<-read.table("edges.txt")
node<-read.table("nodes.txt")
G<-matrix(0,max(edge),max(edge))
n=max(edge)
#pages without links
length( setdiff(edge[,2],edge[,1]) ); head(setdiff(edge[,2],edge[,1]))
for( i in 1:max(edge) ) {
if( length( which(edge[,1]  == i)) == 0 ){ G[i,i]<-1;next}
G[i,edge[ which(edge[,1]  == i) ,2]]<-1 }
G<- apply(G, 2, "/",  rowSums(G)  )
all(round(rowSums(G),15) == 1)
p=.15
########
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
tt<-system.time(
repeat{
y<-x
i=i+1
x<-( (1-p) * t(matt) %*% x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm( ( (1-p) * t(matt) %*% x ) + ( rep( (1/m)* p * sum(x),m) ) )
if( norm(x-y) < 10^-14 ) {break} } )
x<<-x
print(tt)
print(paste0("Iterations: ", i))   }
#myfunction(G,.15)
node[,1]<-round(x,6)
head( node[with(node, order(V1,decreasing = T)), ] , 20)
### Let us use sparsity to speed things up
library(Matrix);rm(x)
edge<-read.table("edges.txt")
nodez<-read.table("nodes.txt")
zeroes<-setdiff(edge$V1,edge$V2)
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
dat<-data.frame(setdiff(edge$V1,edge$V2), setdiff(edge$V1,edge$V2))
names(dat)<-names(edge)
edge<-rbind(edge,dat);rm(dat)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
edge$V3<-1
edge[zeroes,3]<-0
tail(edge)
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
all(round(rowSums(A),14) == 1)
myfunction(A,.15)
nodez[,1]<-round( as.numeric( x ) , 6 )
head( nodez[with(node, order(V1,decreasing = T)), ] , 10)
edge<-read.table("web-NotreDame.txt")
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
rm(dat);rm(x)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
#sparseMatrix doesn't like zeroes
edge$V1<-edge$V1+1
edge$V2<-edge$V2+1
edge$V3<-1
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
n=dim(A)[1]
myfunctiom(A,.15)
edge<-read.table("web-NotreDame.txt")
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
rm(dat);rm(x)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
#sparseMatrix doesn't like zeroes
edge$V1<-edge$V1+1
edge$V2<-edge$V2+1
edge$V3<-1
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
n=dim(A)[1]
myfunction(A,.15)
dat<- ( data.frame(x ,  0:(length(x)-1)) )
x<-as.numeric(x)
edge<-read.table("web-NotreDame.txt")
dat<-data.frame(setdiff(edge$V2,edge$V1), setdiff(edge$V2,edge$V1))
names(dat)<-names(edge)
edge<-rbind(edge,dat)
rm(dat);rm(x)
setdiff(edge$V2,edge$V1)
setdiff(edge$V1,edge$V2)
#sparseMatrix doesn't like zeroes
edge$V1<-edge$V1+1
edge$V2<-edge$V2+1
edge$V3<-1
A <- sparseMatrix(i = edge$V1, j = edge$V2, x = edge$V3)
A <- A/rowSums(A)
myfunction(A,.15)
x<-as.numeric(x)
dat<- ( data.frame( x ,  0:(length(x)-1)) )
names(dat)<-c("p","page")
tail(dat)
head( dat[with(dat, order(p,decreasing = T)), ] , 10)
all(round(rowSums(A),14) == 1)
all(round(rowSums(A),10) == 1)
all(round(rowSums(A),13) == 1)
all(round(rowSums(A),12) == 1)
a<-sample(1:10,5)
mean(a)
a
a%*%rep(1/length(a),length(a))
system.time ( a%*%rep(1/length(a),length(a)) )
a<-sample(1:10,500,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
a<-sample(1:10,50000,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
system.time ( a%*%rep(1/length(a),length(a)) )
a%*%rep(1/length(a),length(a))
a%*%rep(1/length(a),length(a))
mean(a)
a<-sample(1:10,500100,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
a<-sample(1:10,5001010,replace=T)
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
mean(a)
system.time ( a%*%rep(1/length(a),length(a)) )
####### We note we can write B as a vector 1/n * p *  sum x
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
x<-   x/sum(x)
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
print(sort( sqrt(Re(eigen((1-p) *  (matt) + p * 1/m )$values )^2+
Im(eigen((1-p) *  (matt) + p * 1/m)$values)^2 ) , decreasing = T)[1:2])
}
myfunction(mat,.05)
mat<-matrix(0,5,5)
for( i in 1:5){
y<-sample((1:5)[-i],sample(2:4,1))
x<-sample(1:10,length(y))
x<-x/sum(x)
mat[i,y]<-x
}
mat;rowSums(mat)
####### We note we can write B as a vector 1/n * p *  sum x
myfunction<-function(matt,p){
m=dim(matt)[1]
x<-sample(1:10,m,replace=T);i=1
x<-   x/sum(x)
tt<-system.time(
repeat{
y<-x
i=i+1
x<- ( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ) /
norm(( (1-p) * t(matt) %*%x ) + ( rep( (1/m)* p * sum(x),m) ))
if( norm(x-y) < 10^-14 ) {break} } )
print(t(x))
print(tt)
print(paste0("Iterations: ", i))
G<-( (1-p) * matt  + ( p) * matrix(1/m,m,m) )
print( Re(eigen(t(G))$vectors[,1]) / Re( sum(eigen(t(G))$vectors[,1])  ) )
print(sort( sqrt(Re(eigen((1-p) *  (matt) + p * 1/m )$values )^2+
Im(eigen((1-p) *  (matt) + p * 1/m)$values)^2 ) , decreasing = T)[1:2])
}
myfunction(mat,.05)
myfunction(mat,.5)
myfunction(mat,.95)
v1 = c(1, 2, 3, 4, 5, 6)
v2 = v1 + rep(1, 6)
v3 = v2 + rep(1, 6)
v4 = v3 + rep(1, 6)
A = cbind(v1, v2, v3, v4)
dim(A)
class(A)
A
GS = function(matrix_A){
norm_vec <- function(x) sqrt(sum(x^2))
A <- matrix_A
n = nrow(A)
k = ncol(A)
v <- A
q <- matrix(rep(0,n*k), ncol = k) #Q is an n x k matrix
q[,1] = as.matrix(v[,1])/norm_vec(v[,1])
#i = 3
#j = 1
for (i in 2:k){
prev_proj = rep(0, n)
#First define previous projections
for (j in 1:(i-1)){
prev_proj = prev_proj + (as.numeric(t(v[,i])%*%q[,j]))*q[,j]
}
q[,i] = v[,i] - prev_proj
q[,i] = q[,i]/norm_vec(q[,i])
round(t(q[,i])%*%q[,i-1],4) ==0
}
Q = q
return(Q)
}
output <- GS(A)
output
qr.Q(qr(A))
norm_vec <- function(x) sqrt(sum(x^2))
A <- matrix_A
n = nrow(A)
k = ncol(A)
v <- A
q <- matrix(rep(0,n*k), ncol = k) #Q is an n x k matrix
q[,1] = as.matrix(v[,1])/norm_vec(v[,1])
[,1]
q
qr.Q(qr(A))
prev_proj = rep(0, n)
prev_proj
for (j in 1:(i-1)){
prev_proj = prev_proj + (as.numeric(t(v[,i])%*%q[,j]))*q[,j]
}
q[,i] = v[,i] - prev_proj
q[,i] = q[,i]/norm_vec(q[,i])
q
#Define matrix A, dim = n x k, n > k
#n = 6, k = 4
v1 = c(1, 2, 3, 4, 5, 6)
v2 = v1 + rep(1, 6)
v3 = v2 + rep(1, 6)
v4 = v3 + rep(1, 6)
A = cbind(v1, v2, v3, v4)
dim(A)
class(A)
A
GS = function(matrix_A){
norm_vec <- function(x) sqrt(sum(x^2))
A <- matrix_A
n = nrow(A)
k = ncol(A)
v <- A
q <- matrix(rep(0,n*k), ncol = k) #Q is an n x k matrix
q[,1] = as.matrix(v[,1])/norm_vec(v[,1])
#i = 3
#j = 1
for (i in 2:k){
prev_proj = rep(0, n)
#First define previous projections
for (j in 1:(i-1)){
prev_proj = prev_proj + (as.numeric(t(v[,i])%*%q[,j]))*q[,j]
}
q[,i] = v[,i] - prev_proj
q[,i] = q[,i]/norm_vec(q[,i])
round(t(q[,i])%*%q[,i-1],4) ==0
}
Q = q
return(Q)
}
output <- GS(A)
output
qr.Q(qr(A))
#Define matrix A, dim = n x k, n > k
#n = 6, k = 4
v1 = c(1, 2, 3, 4, 5, 6)
v2 = v1 + rep(1, 6)
v3 = v2 + rep(1, 6)
v4 = v3 + rep(1, 6)
A = cbind(v1, v2, v3, v4)
dim(A)
class(A)
A
GS = function(matrix_A){
norm_vec <- function(x) sqrt(sum(x^2))
A <- matrix_A
n = nrow(A)
k = ncol(A)
v <- A
q <- matrix(rep(0,n*k), ncol = k) #Q is an n x k matrix
q[,1] = as.matrix(v[,1])/norm_vec(v[,1])
#i = 3
#j = 1
for (i in 2:k){
prev_proj = rep(0, n)
#First define previous projections
for (j in (i-1):1){
prev_proj = prev_proj + (as.numeric(t(v[,i])%*%q[,j]))*q[,j]
}
q[,i] = v[,i] - prev_proj
q[,i] = q[,i]/norm_vec(q[,i])
round(t(q[,i])%*%q[,i-1],4) ==0
}
Q = q
return(Q)
}
output <- GS(A)
output
qr.Q(qr(A))
rm(list = ls())
v1 = c(1, 2, 3, 4, 5, 6)
v2 = v1 + rep(1, 6)
v3 = v2 + rep(1, 6)
v4 = v3 + rep(1, 6)
A = cbind(v1, v2, v3, v4)
dim(A)
class(A)
A
norm_vec <- function(x) sqrt(sum(x^2))
A <- matrix_A
n = nrow(A)
k = ncol(A)
v <- A
v
q <- matrix(rep(0,n*k), ncol = k) #Q is an n x k matrix
q
q[,1] = as.matrix(v[,1])/norm_vec(v[,1])
q
j=1
(as.numeric(t(v[,i])%*%q[,j]))*q[,j]
i=2
(as.numeric(t(v[,i])%*%q[,j]))*q[,j]
prev_proj = prev_proj + (as.numeric(t(v[,i])%*%q[,j]))*q[,j]
prev_proj
prev_proj = prev_proj + (as.numeric(t(v[,i])%*%q[,j]))*q[,j]
prev_proj = rep(0, n)
prev_proj = prev_proj + (as.numeric(t(v[,i])%*%q[,j]))*q[,j]
q[,i] = v[,i] - prev_proj
q[,i]
q[,i] = q[,i]/norm_vec(q[,i])
q
qr.Q(qr(A))
prev_proj = rep(0, n)
i=3
prev_proj = prev_proj + (as.numeric(t(v[,i])%*%q[,j]))*q[,j]
prev_proj
for (j in (i-1):1){
prev_proj = prev_proj + (as.numeric(t(v[,i])%*%q[,j]))*q[,j]
}
prev_proj
q[,i] = v[,i] - prev_proj
q[,i] = q[,i]/norm_vec(q[,i])
q
qr.Q(qr(A))
j
i
v
A
qr(A)
getwd()
setwd("g:\\math\\661")
library(glmnet)
library(mlbench.)
library(mlbench)
pima.fit = glm(diabetes ~ pregnant+glucose+mass, family=binomial, data=PimaIndiansDiabetes)
data(PimaIndiansDiabetes)
pima.fit = glm(diabetes ~ pregnant+glucose+mass, family=binomial, data=PimaIndiansDiabetes)
pima.fit$fitted.values
pima.fit
PimaIndiansDiabetes
pima<-PimaIndiansDiabetes
head(pima)
pima$diabetes
ifelse( pima$diabetes == pos, 1,0)
ifelse( pima$diabetes == "pos", 1,0)
pima$diabetes<-as.factor(ifelse( pima$diabetes == "pos", 1,0))
head(pima)
pima$pii<-pima.fit$fitted.values
head(pima)
pima$pii
which( pima$pii > .5)
length( which( pima$pii > .5) )
length( which( pima$pii < .5) )
( which( pima$pii < .5) )
pima[ ( which( pima$pii < .5) ),]
pima[ ( which( pima$pii < .5) ),]$diabetes
pima[ ( which( pima$pii < .5) ),]$diabetes == 0
pima[ ( which( pima$pii < .5) ),]$diabetes == 0
pima[ ( which( pima$pii < .5) ),]$diabetes
table( pima[ ( which( pima$pii < .5) ),]$diabetes )
table( pima[ ( which( pima$pii > .5) ),]$diabetes )
fitted(pima.fit),
fitted(pima.fit)
PimaIndiansDiabetes$diabetes
pred = prediction(fitted(pima.fit) , PimaIndiansDiabetes$diabetes)
pred = prediction(fitted(pima.fit) , PimaIndiansDiabetes$diabetes)
library(glmnet)
pred = prediction(fitted(pima.fit) , PimaIndiansDiabetes$diabetes)
library(glmnet)
pred = prediction(fitted(pima.fit) , PimaIndiansDiabetes$diabetes)
library(ROCR)
pred = prediction(fitted(pima.fit) , PimaIndiansDiabetes$diabetes)
perf = performance(pred, "tpr", "fpr")
plot(perf)
abline(a=0, b=1, lty=2)
